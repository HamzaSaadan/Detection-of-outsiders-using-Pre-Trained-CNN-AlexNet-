Dataset = imageDatastore('C:\Users\hamza\Documents\MATALB PROJECT\processed', 'IncludeSubfolders', true, 'LabelSource', 'foldernames');

[Training_Data, Validation_Data] = splitEachLabel(Dataset, 0.7,'randomized');

net = squeezenet;
%analyzeNetwork(net)

Input_Layer_Size = net.Layers(1).InputSize(1:2);
Resized_Training_Data = augmentedImageDatastore(Input_Layer_Size, Training_Data);
Resized_Validation_Data = augmentedImageDatastore(Input_Layer_Size, Validation_Data);

Network_Architecture = layerGraph(net);

Number_of_Classes = numel(categories(Training_Data.Labels));

New_Convolutional_Layer = convolution2dLayer([1, 1], Number_of_Classes, ...
    'WeightLearnRateFactor', 10, ...
    'BiasLearnRateFactor', 10, ...
    'Name', 'Facial Feature Learner');

New_Classification_Layer = classificationLayer('Name', 'Face Classifier');
Layers(end-2) = setL2Factor(Layers(end-2), 'Weights', 0.001);


New_Network = replaceLayer(Network_Architecture, 'conv10', New_Convolutional_Layer);
New_Network = replaceLayer(New_Network, 'ClassificationLayer_predictions', New_Classification_Layer);
% Define training options
options = trainingOptions('sgdm', ...
    'Plots', 'training-progress', ...
    'LearnRateSchedule', 'piecewise', ...
    'LearnRateDropFactor', 0.2, ...
    'LearnRateDropPeriod', 5, ...
    'MiniBatchSize', 32, ...
    'MaxEpochs', 20, ...
    'InitialLearnRate', 0.001, ...
    'ValidationFrequency', 3, ...
    'ValidationData', Resized_Training_Data, ...
    'Verbose', true, ...
    'Plots', 'training-progress');

% Train the network
Trained_Network = trainNetwork(Resized_Training_Data, New_Network, options);
save Trained_Network;